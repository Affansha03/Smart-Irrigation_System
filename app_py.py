# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h-LZ18yqmJMxPbdAT01pUatjsdWOem-2
"""

import streamlit as st
import numpy as np
import joblib

# Load the trained model and scaler
try:
    model = joblib.load("Farm_Irrigation_System.pkl")
    scaler = joblib.load("MinMaxScaler.pkl") # NEW: Load the scaler
except FileNotFoundError:
    st.error("Error: Model or scaler file not found. Please ensure 'Farm_Irrigation_System.pkl' and 'MinMaxScaler.pkl' are in the same directory.")
    st.stop() # Stop the app if model isn't loaded

st.set_page_config(layout="wide") # Use wide layout for better visual

st.title("ðŸŒ± Smart Sprinkler System Powered by AI")
st.subheader("Predicting optimal irrigation for your farm parcels.")

st.markdown("""
    This application utilizes a trained Machine Learning model to recommend sprinkler activation
    for three different farm parcels (Parcel 0, Parcel 1, Parcel 2) based on real-time sensor data.
    The model analyzes 20 distinct sensor readings to make intelligent irrigation decisions,
    aiming to optimize water usage and crop health.
""")

st.markdown("---")

st.header("Sensor Input Dashboard")
st.write("Adjust the sliders below to simulate different sensor readings. Values should be between 0.0 (minimum) and 1.0 (maximum), representing scaled sensor data.")

# Collect sensor inputs (scaled values)
sensor_values = []
# Grouping sliders for better UI
num_cols = 4 # Number of columns for sliders
cols = st.columns(num_cols)
for i in range(20):
    with cols[i % num_cols]: # Place slider in a column, cycling through them
        val = st.slider(f"Sensor {i}", min_value=0.0, max_value=1.0, value=0.5, step=0.01, key=f"sensor_{i}")
        sensor_values.append(val)

st.markdown("---")

# Predict button
if st.button("ðŸš€ Predict Sprinkler Status", help="Click to get predictions based on the current sensor values"):
    # Ensure input array is properly reshaped. Sliders already provide scaled values (0-1).
    input_array = np.array(sensor_values).reshape(1, -1)

    prediction = model.predict(input_array)[0] #

    st.markdown("### ðŸ“Š Predicted Sprinkler Status:")

    # Display predictions using st.metric or custom styling for better visual impact
    col_p0, col_p1, col_p2 = st.columns(3)
    parcel_names = ["Parcel 0", "Parcel 1", "Parcel 2"]
    status_emoji = {0: "ðŸ”´ OFF", 1: "ðŸŸ¢ ON"}
    status_color = {0: "red", 1: "green"}

    for i, col in enumerate([col_p0, col_p1, col_p2]):
        with col:
            st.markdown(f"**{parcel_names[i]}:**")
            # Using st.markdown with color for visual emphasis
            st.markdown(f"<h3 style='color:{status_color[prediction[i]]};'>{status_emoji[prediction[i]]}</h3>", unsafe_allow_html=True)


    st.markdown("---")
    st.markdown("### How to Interpret:")
    st.info("""
        * **ðŸŸ¢ ON**: The model recommends activating the sprinkler for this parcel.
        * **ðŸ”´ OFF**: The model recommends keeping the sprinkler off for this parcel.
        * These recommendations are based on the patterns learned from historical sensor data and corresponding irrigation activities.
    """)

st.markdown("---")
st.markdown("### ðŸš€ Project Overview & Future Scope")
st.markdown("""
    This Smart Sprinkler System represents a significant step towards precision agriculture.
    By automating irrigation decisions, it aims to:
    * **Conserve Water**: Avoid over-watering by providing water only when necessary.
    * **Optimize Crop Health**: Ensure crops receive adequate moisture, leading to better yields.
    * **Reduce Manual Labor**: Automate routine tasks, freeing up farmers' time.
    * **Enhance Sustainability**: Promote environmentally friendly farming practices.

    **Future Enhancements could include:**
    * **Real-time Data Integration**: Connect directly to physical sensors for live predictions.
    * **Time-Series Forecasting**: Incorporate future weather predictions to anticipate irrigation needs.
    * **Reinforcement Learning**: Allow the system to learn and adapt irrigation strategies over time.
    * **User Feedback Loop**: Allow farmers to provide feedback on predictions to continuously improve model accuracy.
    * **Mobile Notifications**: Send alerts to farmers when irrigation is recommended or issues are detected.
""")

st.sidebar.title("About this Project")
st.sidebar.info(
    "This project demonstrates a Machine Learning solution for smart irrigation. "
    "It uses a RandomForestClassifier trained via a MultiOutputClassifier to predict "
    "sprinkler activation for multiple farm parcels. Developed for the AICTE Internship program."
)
st.sidebar.image("https://www.aitc-india.org/img/AICTE-Logo.png", use_column_width=True, caption="AICTE Logo")